syntax = "proto3";
package m2.pb;

import "m2g_Network.proto";
import "m2g_ObjectType.proto";
import "m2g_ItemType.proto";
import "Item.proto";
import "VecF.proto";

enum ServerState {
  // Default state of the ServerThread. In this state, the ServerThread is not yet listening.
  SERVER_NOT_READY = 0;
  // Signifies to ServerThread that the thread should quit.
  SERVER_QUIT = 1;
  // Signifies that the ServerThread is listening for new client connections.
  SERVER_LISTENING = 2;
  // Signifies that the lobby has been closed, but the game hasn't started yet.
  SERVER_READY = 3;
  // Signifies that the game has started.
  SERVER_STARTED = 4;
}

enum ClientState {
  // Default state of the ClientThread.
  CLIENT_NOT_READY = 0;
  // Signifies to ClientThread that the thread should quit.
  CLIENT_QUIT = 1;
  // Signifies that the ClientThread has successfully connected to the server, but is not ready.
  CLIENT_CONNECTED = 2;
  // Signifies that the ClientThread is ready to begin the game.
  CLIENT_READY = 3;
  // Signifies that the initial ServerUpdate is received, thus the game has begun.
  CLIENT_STARTED = 4;
}

message ServerUpdate {
  // 0-based index of the receiver
  uint32 receiver_index = 1;

  // 0-based index of the current turn holder
  uint32 turn_holder_index = 2;

  // ObjectId of the objects that belong to players on the server side. The size of this list also represents the total
  // player count in the game. player_object_id[receiver_index] corresponds to the receiver of the message.
  repeated uint64 player_object_ids = 3;

  // Both object_id and parent_id refer to the objects on the server side. It's client's responsibility to create the
  // same object tree locally.
  message ObjectDescriptor {
    uint64 object_id = 1;
    VecF position = 2;
    m2g.pb.ObjectType object_type = 3;
    uint64 parent_id = 4;
    repeated m2g.pb.ItemType named_items = 6;
    repeated Resource resources = 7;
  }
  repeated ObjectDescriptor objects_with_character = 4;
}

message ClientUpdate {}

message NetworkMessage {
  int32 game_hash = 1;
  oneof type {
    // Signifies readiness of the client
    bool ready = 2;
    // Sent by the server game code explicitly to trigger an action
    m2g.pb.ServerCommand server_command = 3;
    // Sent by the game engine automatically to transfer the state to clients
    m2.pb.ServerUpdate server_update = 4;
    // Sent by the client game code explicitly to trigger an action
    m2g.pb.ClientCommand client_command = 5;
    // Sent by the game engine automatically (not yet implemented, no known use case)
    m2.pb.ClientUpdate client_update = 6;
  }
}
