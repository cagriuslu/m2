syntax = "proto3";
package m2.pb;

import "m2g_Network.proto";
import "m2g_ObjectType.proto";
import "m2g_ItemType.proto";
import "Item.proto";
import "VecF.proto";

enum ServerThreadState {
  // Default state of the ServerThread. In this state, the ServerThread is not yet listening.
  SERVER_INITIAL_STATE = 0;
  // Signifies that the ServerThread is listening for new client connections.
  SERVER_LOBBY_OPEN = 1;
  // Signifies that the lobby has been closed, but the game hasn't started yet.
  SERVER_LOBBY_CLOSED = 2;
  // Signifies that the game has started.
  SERVER_STARTED = 3;
  // Signifies that the server has been shut down.
  SERVER_GAME_FINISHED = 4;
}

enum ClientThreadState {
  // Default state of the ClientThread.
  CLIENT_INITIAL_STATE = 0;
  // Signifies that the ClientThread has successfully connected to the server, but is not ready.
  CLIENT_CONNECTED = 1;
  // Signifies that the ClientThread is ready to begin the game.
  CLIENT_READY = 2;
  // Signifies that the initial ServerUpdate is received, thus the game has begun.
  CLIENT_STARTED = 3;
  // Signifies that the client has disconnected from the server, and trying to re-establish the connection.
  CLIENT_RECONNECTING = 4;
  // Signifies that the client has reconnected to the server, and requires the level to be started.
  CLIENT_RECONNECTED = 5;
  // Signifies that the server has shut down the game, and the client have terminated the connection.
  CLIENT_SHUTDOWN = 6;
  // Signifies to ClientThread that the thread should quit.
  CLIENT_QUIT = 7;
  // Signifies that ClientThread is quitting because it's timed out trying to connect to the server.
  CLIENT_RECONNECTION_TIMEOUT_QUIT = 8;
  // Signifies that ClientThread is quitting because the server misbehaved.
  CLIENT_MISBEHAVING_SERVER_QUIT = 9;
}

message ServerUpdate {
  // (Hopefully) unique token for each created level. Use by the client to verify that upon reconnection, they connect
  // to the same game instance.
  uint64 level_token = 1;

  // 0-based index of the receiver
  int32 receiver_index = 2;

  // 0-based index of the current turn holder
  int32 turn_holder_index = 3;

  // ObjectId of the objects that belong to players on the server side. The size of this list also represents the total
  // player count in the game. player_object_id[receiver_index] corresponds to the receiver of the message.
  repeated uint64 player_object_ids = 4;

  // Both object_id and parent_id refer to the objects on the server side. It's client's responsibility to create the
  // same object tree locally.
  message ObjectDescriptor {
    uint64 object_id = 1;
    VecF position = 2;
    m2g.pb.ObjectType object_type = 3;
    uint64 parent_id = 4;
    repeated m2g.pb.ItemType named_items = 6;
    repeated Resource resources = 7;
    repeated Attribute attributes = 8;
  }
  repeated ObjectDescriptor objects_with_character = 5;

  // If this flag is set, this ServerUpdate is the last one, and the client should shut down the game.
  bool shutdown = 6;
}

message ClientUpdate {
  // If non-zero, signifies readiness. If the client reconnects, it needs to show the same token in 3 seconds.
  uint64 ready_token = 1;
}

message NetworkMessage {
  int32 game_hash = 1;
  // Each message type and client maintains an independent sequence number. Since server commands are point to point,
  // different clients might expect a sequence number that's different from other clients. Server updates are global, so
  // every client should follow the same sequence number, but even then, this sequence number is different from the
  // sequence number of the server command. Similar logic applies to client commands and updates. They are distinct.
  int32 sequence_no = 2;
  oneof type {
    // Sent by the server game code explicitly to trigger an action.
    m2g.pb.ServerCommand server_command = 3;
    // Sent by the game engine automatically to transfer the state to clients.
    m2.pb.ServerUpdate server_update = 4;
    // Sent by the client game code explicitly to trigger an action. Only the turn holder can send this command. ClientCommands
    // from other player's will be ignored.
    m2g.pb.ClientCommand client_command = 5;
    // Sent by the game engine automatically
    m2.pb.ClientUpdate client_update = 6;
  }
}
