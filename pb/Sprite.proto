syntax = "proto3";
package m2.pb;

import "m2g_SpriteType.proto";
import "RectI.proto";
import "VecF.proto";
import "Dim2f.proto";
import "m2g_ItemType.proto";

message Fixture {
  message RectangleFixture {
    VecF sprite_origin_to_fixture_center_vec_px = 1;
    Dim2f dims_px = 2;
    float angle_rads = 3;
  }
  message CircleFixture {
    VecF sprite_origin_to_fixture_center_vec_px = 1;
    float radius_px = 2;
  }
  message ChainFixture {
    // The points are with respect to the origin of the sprite. They are automatically completed into a loop. At least
    // 3 points should be given.
    repeated VecF points = 1;
  }

  string name = 1;
  oneof fixture_type {
      RectangleFixture rectangle = 2;
      CircleFixture circle = 3;
      ChainFixture chain = 4;
  }
}

message ForegroundCompanion {
  // Vector from the center of the sprite to the point that should be the origin of the Foreground Companion
  VecF center_to_origin_vec_px = 1;
  // w.r.t SpriteSheet coordinates
  repeated RectI rects = 2;
  Fixture fixture = 3;
}

message RegularSprite {
  string comment = 1;

  // Coordinates of the sprite in sheet
  RectI rect = 2;

  // Original rotation should be set according to the rotation of the sprite in the sprite sheet
  // Expects values in-between (-1, 1], which corresponds to -180, 180 degrees.
  // Positive value means the sprite is rotated clockwise in the sheet.
  // Example: If the sprite points towards top-left on the sheet, it's original rotation is -0.75.
  // The graphics system will rotate the sprite back before drawing.
  // Collider parameters and other offsets should assume the sprite is already rotated while filling in the values.
  // For example, center_to_origin_vec_px should contain the vector to origin as-if the sprite is ALREADY rotated.
  // TODO this is quite difficult
  float original_rotation = 3;

  // Override the PPM value of the sheet with this value if given.
  int32 override_ppm = 4;

  // Vector from the center of the (rect) to the position that should be the origin
  VecF center_to_origin_vec_px = 5;

  // Fixtures are not automatically loaded. Sprite editor can be used to draw fixtures on the sprite itself.
  repeated Fixture fixtures = 6;

  // If the sprite is a background tile, it'll show up in the level editor as a background sprite, instead of a
  // foreground sprite. Additionally, fixtures will be auto-created as static bodies during loading.
  bool is_background_tile = 7;

  ForegroundCompanion foreground_companion = 8;

  // Sprites can hold immutable items just to simplify attribute lookup
  repeated m2g.pb.ItemType named_items = 9;
}

message Color {
  uint32 r = 1;
  uint32 g = 2;
  uint32 b = 3;
  uint32 a = 4;
}
message ImageAdjustment {
  float brightness_multiplier = 1;
}
message BlurredDropShadow {
  int32 blur_radius = 1; // The width (or height) of the convolution matrix will be (blur_radius * 2 + 1).
  float standard_deviation = 2; // of Gaussian blur
  float final_transparency = 3; // [0, inf] Multiplies the alpha value after blurring.
}

// TODO rename
message SpriteEffect {
  oneof effect {
    Color color_mask = 1;
    bool grayscale = 2;
    ImageAdjustment image_adjustment = 3;
    BlurredDropShadow blurred_drop_shadow = 4;
  }
}

message Duplicate {
  m2g.pb.SpriteType original_type = 1;

  // Sprites can hold immutable items just to simplify attribute lookup
  repeated m2g.pb.ItemType additional_named_items = 2;

  // Optionally, sprite effects might be applied to the original sprite
  repeated SpriteEffect additional_effects = 3;
}

message Sprite {
  string comment = 1;
  m2g.pb.SpriteType type = 2;
  oneof variant {
    RegularSprite regular = 3;
    Duplicate duplicate = 4;
  }
}

message SpriteSheet {
  string comment = 1;
  string resource = 2;
  int32 ppm = 3; // Pixels per meter
  repeated Sprite sprites = 4;
}

// TextLabel is a sprite-like object that can be placed in the game world.
message TextLabel {
  m2g.pb.SpriteType type = 1;
  string text = 2;
  float height_m = 3;
  Color background_color = 4;
  // Amount in world dimensions the text label will be pushed towards. Often used to center a text below an even number
  // of cells by pushing the text label toward right or left by 0.5 meters.
  VecF push_dimensions = 5;
  bool is_background_tile = 6;
}

message SpriteSheets {
  repeated SpriteSheet sheets = 1;
  repeated TextLabel text_labels = 2;
}
