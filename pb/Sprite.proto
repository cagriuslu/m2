syntax = "proto3";
package m2.pb;

import "SpriteType.proto";
import "RectI.proto";
import "VecF.proto";
import "Dim2f.proto";

message Color {
  uint32 r = 1;
  uint32 g = 2;
  uint32 b = 3;
  uint32 a = 4;
}

// Only background tiles can have foreground companion
message ForegroundCompanion {
  optional VecF center_offset_px = 1;
  repeated RectI rects = 2; // w.r.t SpriteSheet coordinates
}

message ImageAdjustment {
  float brightness_multiplier = 1;
}

enum SpriteEffectType {
  NO_SPRITE_EFFECT = 0;
  SPRITE_EFFECT_FOREGROUND_COMPANION = 1;
  SPRITE_EFFECT_MASK = 2;
  SPRITE_EFFECT_GRAYSCALE = 3;
  SPRITE_EFFECT_IMAGE_ADJUSTMENT = 4;
}

message SpriteEffect {
  SpriteEffectType type = 1;
  oneof effect_arg {
    ForegroundCompanion foreground_companion = 2;
    Color mask_color = 3;
      ImageAdjustment image_adjustment = 4;
  }
}

message Collider {
  optional VecF center_offset_px = 1; // Offset from the origin of the sprite
  oneof collider_variant {
    Dim2f rect_dims_px = 11;
    float circ_radius_px = 12;
  }
}

message Sprite {
  m2g.pb.SpriteType type = 1;
  repeated SpriteEffect effects = 2;
  RectI rect = 3;
  // Original rotation is just an offset to the graphics.
  // Colliders should assume the image is pointing in the right direction.
  float original_rotation = 4; // In 1/PI
  uint32 override_ppm = 5; // Pixels per meter
  VecF center_offset_px = 6; // Offset from the center of the rect
  Collider background_collider = 7;
  Collider foreground_collider = 8;
  bool is_background_tile = 9;
}

message SpriteSheet {
    string __comment__ = 1;
    string resource = 2;
    uint32 ppm = 3; // Pixels per meter
    repeated Sprite sprites = 4;
}

message SpriteSheets {
  repeated SpriteSheet sheets = 1;
}
