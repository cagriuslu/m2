syntax = "proto3";
package m2.pb;

import "m2g_SpriteType.proto";
import "RectI.proto";
import "VecF.proto";
import "Dim2f.proto";
import "M2.proto";

message Color {
  uint32 r = 1;
  uint32 g = 2;
  uint32 b = 3;
  uint32 a = 4;
}

// Only background tiles can have foreground companion
message ForegroundCompanion {
  // Vector from the center of the (rect) to the position that should be the origin
  VecF center_offset_px = 1;
  repeated RectI rects = 2; // w.r.t SpriteSheet coordinates
}

message ImageAdjustment {
  float brightness_multiplier = 1;
}

enum SpriteEffectType {
  NO_SPRITE_EFFECT = 0;
  SPRITE_EFFECT_FOREGROUND_COMPANION = 1;
  SPRITE_EFFECT_MASK = 2;
  SPRITE_EFFECT_GRAYSCALE = 3;
  SPRITE_EFFECT_IMAGE_ADJUSTMENT = 4;
}

message SpriteEffect {
  SpriteEffectType type = 1;
  oneof effect_arg {
    ForegroundCompanion foreground_companion = 2;
    Color mask_color = 3;
    ImageAdjustment image_adjustment = 4;
  }
}

message Collider {
  // Vector from origin of the sprite to the position that should be the origin of this collider.
  VecF origin_offset_px = 1;

  oneof collider_variant {
    Dim2f rect_dims_px = 11;
    float circ_radius_px = 12;
  }
}

message RegularSprite {
  // List of effects that might be used during the game
  // Effects are only generated for regular sprites, not for sprites with backgrounds.
  // TODO convert to Map
  repeated SpriteEffect effects = 1;

  // Coordinates of the sprite in sheet
  RectI rect = 2;

  // Original rotation should be set according to the rotation of the sprite in the sprite sheet
  // Expects values in-between (-1, 1], which corresponds to -180, 180 degrees.
  // Positive value means the sprite is rotated clockwise in the sheet.
  // Example: If the sprite points towards top-left on the sheet, it's original rotation is -0.75.
  // The graphics system will rotate the sprite back before drawing.
  // Collider parameters should assume the sprite is already rotated.
  float original_rotation = 3;

  // Override the PPm value of the sheet with this value if given.
  int32 override_ppm = 4;

  // Vector from the center of the (rect) to the position that should be the origin
  VecF center_offset_px = 5;

  Collider background_collider = 6;
  Collider foreground_collider = 7;

  // If the tile is a background tile, it'll show up in the PAINT list of the level editor.
  bool is_background_tile = 8;
}

message Sprite {
  string __comment__ = 1;
  m2g.pb.SpriteType type = 2;
  oneof variant {
    RegularSprite regular = 3;
  }
}

message SpriteSheet {
  string __comment__ = 1;
  string resource = 2;
  int32 ppm = 3; // Pixels per meter
  repeated Sprite sprites = 4;
}

message SpriteSheets {
  repeated SpriteSheet sheets = 1;
}
