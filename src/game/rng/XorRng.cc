#include <m2/game/rng/XorRng.h>
#include <m2/detail/Bit.h>
#include <array>

#include "m2/Meta.h"

namespace {
	std::array<uint64_t, 512> gXorPatterns = {
		0x7fd7812673c29ec0,
		0xa2024d2a7752ab0a,
		0x1d0356ced95c0eea,
		0x467a977b2e85a4ac,
		0xda6d290a813800df,
		0xb0b90260680cc6d3,
		0x62fdb8ffbeb16c05,
		0x7c76f6546ded0cec,
		0x291b014ff5253abb,
		0x961673909b0f36b7,
		0x4260287a1cfb77c6,
		0xefaaf11ced742387,
		0xdedea0915fd12e70,
		0x89351e9c39b25731,
		0x41bdb65dba85493b,
		0xcae744dd151ac9b1,
		0xbf730995892a00a1,
		0xb9a8273de89c8a3c,
		0x8de95d927312b851,
		0x3e7128e91e24b8b0,
		0xcf2880e997c560cd,
		0x7068e9223fe55d75,
		0x86aa5142c7720afb,
		0xe4a058ab13c35109,
		0xf4dff2782e7303bc,
		0x89f1ebfe79d714d,
		0xa5db54781f585688,
		0x8866b34251f19639,
		0x8dd185ba976d754b,
		0x93cd661eca62a709,
		0xae77f57b7a852be1,
		0xe96b332519055ed6,
		0x35af8b6a3f80fe6a,
		0x52662958d4756d86,
		0x24223b1d51e0d1e8,
		0xcf324a7b428a5460,
		0x9a6301a970cc35c9,
		0xaf52d26829f5e41d,
		0x1faa28f5d0495e54,
		0xb99c78e84fe1f3f5,
		0x391e991c9f5fb7de,
		0xe4f96eb4c80d1447,
		0xb1d0c61c371ba75a,
		0x6265efed23d1476c,
		0xc5208204d25e81d0,
		0xa39e18d0b6421bd8,
		0x253eb7660d40e3fc,
		0xd1df436e0c202d6,
		0x5ca6fe53e4e8d271,
		0x1d1d00f26d222989,
		0x2afaae45876f6753,
		0xa06b9dad379c1981,
		0x4781dc8a95a352ea,
		0x53c706e7dab26161,
		0xfe8206857bf9c5c0,
		0x51c4b62d0d6cf6a,
		0x9e42f4f7c3e872df,
		0x725b2283848661af,
		0x2e9fdee3a55eddbd,
		0x317e3a9a3b832750,
		0xccd7217d42b61918,
		0xf1b8aa049f1f34c7,
		0xb71a0ddfef3bc59,
		0x5a512095ef04ace4,
		0x2b65a23ef6b18fd5,
		0x88a4c243f30a7ad4,
		0xe3d24b968d223aff,
		0x554a5f50cc5c566e,
		0x70ad54ec3e46212,
		0x49ab47cc17c93a35,
		0x855fd00514820e22,
		0xc21c8a612e5213f4,
		0xed17efc16db70c5c,
		0xd0d33b1862e59f50,
		0x5c9d59a3ff93700,
		0x788bdb59068bc14f,
		0x2495bd87524dc24c,
		0x5f7c7869111c313,
		0x165347c22f41a379,
		0x7a99b79b426fa26c,
		0xadc1b1dfa7becd71,
		0x5ad38ae133ede01f,
		0x7a754656f50eb832,
		0x98f320a2a481a5ce,
		0x9052b78e1e468378,
		0xa3f172419c3e7e33,
		0x1f11089dad89348b,
		0x114e10ff542f182c,
		0xacc72c79d5c308fa,
		0xfbb16132d29e1e13,
		0x71a378bc2eb185a8,
		0x493d7c79295c7903,
		0x267f74126c18098e,
		0x2d8857dac8b1f918,
		0x2b5161f5b2181ae7,
		0xbb9aa182d11f2553,
		0x661bd8ad310a2a3e,
		0x9c8de0dc922791d6,
		0x41adb5684f77d222,
		0xfd67e8a18aa69910,
		0x72dc4d2b93c61416,
		0xc89e831d769378b1,
		0x14481ede07259699,
		0x34b016ea8695d7,
		0xd0fa3b1917d6e485,
		0x8f1b7bb650a98b77,
		0xf3eb9bb49d7f1c08,
		0x286d449bdafff056,
		0x472c6de3df76700e,
		0x5abc27b990e018c3,
		0x5086f0d1c14c4aeb,
		0xca89abdd697e1046,
		0x8fa3876835b0b842,
		0x626817c0e6a8f68f,
		0x5c42bc417b9f9476,
		0x15483ceff84e9c93,
		0x38885cf3e9e6fa12,
		0xc8290f683c1f7e12,
		0x3039b9bc7ef53b60,
		0x584b68b837f89e42,
		0x3baa8535308698b3,
		0x7930491530e102e6,
		0xbcce1d1501bbb832,
		0xa27d51e103d6d312,
		0xd87ffa12aef89395,
		0x71d2b09e64be15d9,
		0x2b4be5af4a78498f,
		0x6dc2e0528ead8173,
		0xf65dd14f0f390dc0,
		0x3ea551cba5a729a7,
		0x1952947422ab264c,
		0x3ed886f9d7bda47b,
		0xb49016930a88f9d8,
		0xe6e51315914d4775,
		0xbc18933803363ad2,
		0xce602bd8a698c238,
		0xbd3a42a34f522999,
		0xbf4752ce87bdea16,
		0xa6335e59e7f6b181,
		0xdc02c7de00cd7b80,
		0x4cede5f6052405b8,
		0x9f5e2e3b391a62b8,
		0xf3c7baa56b5c803f,
		0x872743858071b291,
		0x62b33aa6f91c2556,
		0x8cf3da88f696d335,
		0xa6bfbd8bb3af0b18,
		0x498abca7b74bad4a,
		0x4a1359b5ce1c817d,
		0x5b175a2454b81ba9,
		0x26f6669bcadb5681,
		0x5cdfe210ed766e9d,
		0xeaa26b92d87d884f,
		0x9703db60c698209d,
		0x6223ee1f5e7e807b,
		0x9b7eb8a98e7507bf,
		0x6cca07badee7cc4d,
		0x3d6931a89f5e9173,
		0xdf6b59706569539a,
		0xc6e336299b14c1bc,
		0xf105b2be5c27cfd3,
		0xafcaa14afa165d44,
		0x87e78a5e4766f786,
		0x9df15d3b040fa7aa,
		0xe135f8f6984ab9a8,
		0x72e02f08b59327b7,
		0x6ca39b2f164e51c3,
		0x59ce89cf84073087,
		0xbe1e2e7b90b1ba8e,
		0xda92a37ce055e22d,
		0x2c90fe0a054a5f9d,
		0x7fd1954176a6791d,
		0x470eaefaf28253b4,
		0x6bbcee4cfef73d19,
		0x45561bfe10d4723a,
		0xfbee00df2b7326e8,
		0x162e2f93aec99351,
		0xac8b29c2a9e7b4b0,
		0x55d53fa9d94e4ba0,
		0x594e9af3c4509b63,
		0xe8bade8601c9f98c,
		0x19ab2ca225dbfe92,
		0xe3238bf816970e09,
		0x1ee4faf9534713c6,
		0x38d92dc0e9572b08,
		0x110208f600374e9,
		0xc072d7e216bd705d,
		0x50f6e5e3a7418c4f,
		0x21afe5665931886b,
		0x4b04336797dfcbdc,
		0xea890d1c1e54eeab,
		0x3b4d58335b1ed06f,
		0x6227c8ea0758a6d3,
		0xa6f6ad1a79510621,
		0x1c0593f9a0485114,
		0x8203955a5929a66d,
		0xc37be7e8a4c90ba5,
		0x510e38fcec45080,
		0xbd2f159f61a97cd,
		0xaa7d9281beb608d6,
		0x74a4a461e9a073e4,
		0x192d3b09aa23b2e0,
		0xb6e2107909ab2f5d,
		0x3192e25883e88db8,
		0x2f243069760de7a,
		0x3afe0f073b085c51,
		0x9e0a4ffdf0ebda57,
		0x56ed434740df6fc1,
		0x807d7275c7dfa5cf,
		0xe2dba7edbb36a13,
		0x5d6474c4f12bcdb6,
		0xe267d9397dc059d7,
		0x6961e60bc7e0a6ff,
		0x97bc209847f7bae8,
		0x54efaf20bf38b497,
		0x1db78117e2d4e8d6,
		0x815c00d1d8b7c1c5,
		0x3aecbe6255a041f,
		0xd6ccc20899f41050,
		0x4ca06dc882cbc95a,
		0x1fcbb787e85f7398,
		0x8d766500629ca75a,
		0xee525a6d7b08be6c,
		0x4b24b6f54c9734a8,
		0xa0d281edd1dd7df9,
		0xa8ff56a87bf561fa,
		0x2c902bf3ae780773,
		0x6d01b6edd9876469,
		0x25f835bf49ae20a3,
		0xb8340c98e57ab7eb,
		0x3c29fc66e63597d1,
		0x7e7171b05b560ec9,
		0xa95d5cfdbf5ebed2,
		0xcb05865bc5c91898,
		0x3da3f75c729fe455,
		0xd66828a57506b833,
		0x1be1c4190e8322fc,
		0xc0abec431cf1872e,
		0xb6e77f41fb8ca8f7,
		0xfd47c7256d0330de,
		0x77fa025e9b8ab4e6,
		0xbb9d4b89cbbe4bb7,
		0x23d460918277925,
		0x4645c0226f575657,
		0xcd035304a593eae1,
		0xd2dc883fa4cf9dcd,
		0xa7cd7377e823af9b,
		0x8e126ec2a23a1dec,
		0x5e490a4af3c4d12b,
		0x20032be86b125f53,
		0xd3d9b06b959b2462,
		0x3dd7cee7f326bee5,
		0x605340af58f49bf7,
		0xb63930731a46cb2d,
		0x66fd1353c98b6473,
		0x8d8cf8fff736b041,
		0x7512f5649d0e1a4,
		0xf816ea29983a7e17,
		0x97654df25272477f,
		0xa851afef9f70bd1,
		0x5debcadb73208c0d,
		0x49eddac23dc6c757,
		0xeab881871d5d130f,
		0x656bee9dd2095b27,
		0xf85fd78e34527e29,
		0xc1cbc0544705e477,
		0x6cf3ded509886ad5,
		0xd06e9eb01ab7c7bf,
		0x5b280a89a2ad55ae,
		0xc51f9941639e8be3,
		0x7f0d46cd7b1b6495,
		0x7919bcbb001e4b1,
		0x556a9511b110d48b,
		0xdd50918feb76fa49,
		0xc20b1f7c5cd53c7c,
		0x849e773eec4db7f7,
		0xc8983e5f0f37e30e,
		0xe9bfede08812f2d4,
		0xcdf99fe817f3be8f,
		0x2071dcc05ac49863,
		0xfb6a7cf686832714,
		0xc7883aae8733d6cc,
		0x9b9398127b6eaf2d,
		0xa3f27f148179284b,
		0x1bb4f9fb48948eb,
		0x10f7ff2ac10d8d65,
		0x50731f52fef49158,
		0xadbb74049c9f753c,
		0x671430c60f0aad0f,
		0xfd9cb2ab3cf901c8,
		0x400500030180985f,
		0x8932d18a842ec87a,
		0x94b27ee7f22e6377,
		0xbdf493146400b930,
		0x361bc1497bb503e9,
		0x81a629b479f958b0,
		0xd322facddeb69db1,
		0xd0e3657278838a91,
		0xaf110820178a02e8,
		0x4e09fc54017fbf8d,
		0x256001e8ccd33866,
		0x6116624180909388,
		0x7f355dd3f0275e73,
		0x64ef51a2bf24d6e3,
		0x9fbcbc2e5d05f39b,
		0x2283d23ea662acfb,
		0x9bf9614b07124c6d,
		0xa38c08155143e531,
		0xe9e1845ade31033c,
		0xe1ce5a6f31d31d93,
		0x75249f3dcfe34f0f,
		0xf5e4d26dfcff173b,
		0x21c03a6aae0b1c80,
		0x84c268a4e7539c92,
		0x4c294b9888069038,
		0x145a2bb8b9f2d835,
		0x55132c7b95129896,
		0x3de8f8501a3b505d,
		0x2f0819f41bf8d6eb,
		0xd4047cd0681597be,
		0xc99afe3bb2f4a142,
		0x84d5cbf99ea88478,
		0x1c0e1747b237cd83,
		0x5ee0a6e3bb7d9a18,
		0x4f67caae88449cd0,
		0x199e192ec6d3127e,
		0xe59969549c1607c,
		0x7c3a1ae9dace2fcc,
		0x6a4d887fac3cdc1e,
		0x6271617beb1d487c,
		0xffbb9f0ca88b0fd5,
		0x45762fc8e1b72bce,
		0xcc9c3fdd273f94fa,
		0xcf185268e5a15c20,
		0x8ca2cbbdd75e038b,
		0x2a5e969f81490285,
		0x7fbb33501cdd0947,
		0xbe3384d41ae45067,
		0x4fbbf206143845f4,
		0x8b3cadaa6f29d9fa,
		0x36eaad1f8641e142,
		0xe6adb062949f1a5c,
		0x57e4ed914cc11d93,
		0x9718d7b1dfd1f291,
		0xa8224958b5e80df6,
		0x6412a995494e8dfa,
		0x65aa8ea7f9fc2eb7,
		0x94f3cb7e880625ed,
		0x9310610281d9f9de,
		0xa3ce62b178e3ae96,
		0xe5fcbc80dc14c1eb,
		0x76204cdc3e0bb75e,
		0xe09b46763a533da5,
		0x4e04ba3d6d2069dc,
		0x1898646cd305225c,
		0x16e76a64c78c7fc3,
		0x4f9557160c82913,
		0x1d6194b790263319,
		0x783284dfdbe1d8c1,
		0x2bca4fb6c6ff964f,
		0x42a25517f7b9be32,
		0x20b3cc0726f9ab7,
		0x62d3762a66647823,
		0xff9d69c370fcf3de,
		0xf3d0cc37b668689,
		0xb1c6d4fbf68110c9,
		0x45773c8824bc1880,
		0xa95d3acdc53d2bd0,
		0xec7e655c11a9b0f5,
		0xf0b5ac029af9f4b,
		0xdb7b248db9f3da0,
		0xfc4d9fd2d1111002,
		0x3919c176b93165a6,
		0xd7f8c9d2c06b1cfb,
		0x1c4fda2d7ad56d4c,
		0x51e22bc5bd4959c8,
		0x5fae3386374192a2,
		0xbb5967f857f1481d,
		0xfbb3d9836cb4ce8a,
		0x87279a83d0606ffe,
		0xa9d8eeca8c59680,
		0xf038333f44ec7418,
		0xf7b9d0a3f642f165,
		0x29358d7934904a21,
		0x90cb6cf0dd7363e5,
		0x55ec9337888e701c,
		0x100c887a246ee4f4,
		0x21aa31c8b38e2485,
		0x113104e3602e64e6,
		0x6c37c4cbb3fb4165,
		0xd69d0970bacc40e2,
		0x927fe5bd1b526ed5,
		0xb67e146aae30d173,
		0x29ae9e825d22e9c1,
		0x2d27e64c4804bf82,
		0x8b202a3f726e8f20,
		0x445a2f9da43ddef9,
		0x466bddb2425b514,
		0xe6f05e889ae9fefb,
		0x4fc94187840f2ca0,
		0x407895f77c0c9a06,
		0x6f67719863ff63df,
		0x23eeb57d3dc2ed6e,
		0x71d5ab606a81f524,
		0x982b42385bd0e76e,
		0xefdeaf55948f7671,
		0x57a5bc2c77056a53,
		0x6f0a7678ca69a349,
		0xe4bd2a15e1b58f8f,
		0xee800748e61b908b,
		0xfb4ffcb994dce381,
		0xfcc96f56e45a573c,
		0x211fdbb7c6aaca61,
		0xba2493d83de8ae65,
		0xa26dbc61d3efe77b,
		0x6fab77341c0cfe07,
		0x20e793b2c0631df0,
		0xf94f7d976f3fd760,
		0xdff2ee041a008e17,
		0xa91a81585deab392,
		0x29c2e5b9a1975598,
		0x9f5dd40b7ab93bbd,
		0x5d2ee7eee8fde95c,
		0x2a6def7910f2a141,
		0xf85251f4f89e821e,
		0x3a88287406c0c70b,
		0x3dd52c3622491098,
		0x54e4c13f1a59632c,
		0x7215f6496d9b26b0,
		0x26eff7710fc459de,
		0xd2dadb03b5b898d8,
		0x64d26b393085db71,
		0xe8f051a9eb07f9b5,
		0xc08dda3e72ab152d,
		0xe11921cf4bc36dc,
		0x980d60ab0d05010a,
		0xc1ae70f9da4c3c74,
		0x17d58ac9c6f2b77c,
		0xb0e90e7ac2851af9,
		0xaf0e382cdee6b59f,
		0x72893d60c1ad5774,
		0x6a73674d4cd31581,
		0xac9a72c4bdf1b6b5,
		0x949086aa0030db0,
		0xa726f84a83a07762,
		0xfed7014c64609334,
		0xaf7b8e2477226046,
		0x9ea252af8c1b716c,
		0x9cfbe84da6adbba5,
		0xd71e7be50817c011,
		0xf6896aec6b602926,
		0x22f4af7ac34bee55,
		0xcb8e6c2193bf0335,
		0xf143f59fee33984a,
		0xc26a507535a72486,
		0xa93108782b7d6332,
		0x125963fd5471a3f8,
		0x6a1c8caab8d48e77,
		0x5fdbf84369c3398a,
		0x137f7f3a312d525e,
		0xf0319c708d55a66e,
		0xba6d6cfaab8117b,
		0xae716def6640c081,
		0x35f8e730a371c93e,
		0x260c3445f02bba0e,
		0x6840869dd5fb78c,
		0x3ef50e7e1f5cfcd0,
		0x8fcd1ebfd4d0ac73,
		0xb46e6e3573ba0583,
		0x87ba1d9c49310c9f,
		0xb7c95cfa662b98a4,
		0x531fd962a360bdfd,
		0x783c28dbc42ec85a,
		0xde44f1c1eb92e348,
		0xd6e7f08a352768a1,
		0x6ce04600561d9784,
		0xf000abae28d129c8,
		0xf44a8d0c70a0a44,
		0x4542626182292f97,
		0x79e40f1a1e5282f6,
		0xb9b6d813871fdaf8,
		0xb629d609874f4c87,
		0xcff7b9c575e48c61,
		0xe1c667428786a318,
		0x63deb473c2c3e2e0,
		0x69db9662dc50f5b1,
		0xff1a6eebf08cd61d,
		0xcc5584eee041216b,
		0xaafb9df665804ae4,
		0xe63090320ce45273,
		0x2b10f78f29f3f84b,
		0x1a39e6dd78f9764c,
		0x628099311d40197e,
		0x300cd51715a01cbb,
		0x1035546add7016cd,
		0x1a9285cc4da8125c,
		0xfa7c0f8478d599a4,
		0xf8b40255053f47f2,
		0x49de55fe09528977,
		0x8ef433c4fb702563,
		0x4d85185dc5c6a4c9,
		0x8f14213f63973b5c,
		0x4673546e6eb1571a,
		0xa463da9e00f13953,
		0x7515d47385251ec,
		0x467a1dacd8ff2cff,
		0x5347932d23ece736,
		0x158da45d2f0aaeb,
		0x6c9af76788f04b6e,
		0xf800f06302bddbfb,
		0x99c2b4630a3767c0,
		0x21350e644517af9c,
	};
}

m2::XorRng::XorRng(const uint64_t seed1) : Rng(), _prevNumber(seed1) {}

uint64_t m2::XorRng::GenerateNextNumber() {
	const auto iterationCountLeastSignificantBit = PickSequentialBits(_prevNumber, 0, 6);
	const auto patternXorLeastSignificantBit = PickSequentialBits(_prevNumber, 6, 6);
	const auto rotateCountLeastSignificantBit = PickSequentialBits(_prevNumber, 12, 6);

	const auto iterationCount = 1 + PickSequentialBits(_prevNumber, iterationCountLeastSignificantBit, 3);

	const auto prevReturnedNumber = _prevNumber;

	m2Repeat(I(iterationCount)) {
		const auto patternToXor = PickSequentialBits(_prevNumber, patternXorLeastSignificantBit, 9);
		const auto rotationCount = PickSequentialBits(_prevNumber, rotateCountLeastSignificantBit, 6);

		// XOR with pattern
		_prevNumber = _prevNumber ^ gXorPatterns[patternToXor];

		// Rotate
		_prevNumber = RotateLeft64(_prevNumber, rotationCount);
	}

	if (prevReturnedNumber == _prevNumber) {
		// The RNG repeated itself, we need to avoid stability.
		_prevNumber ^= 0xFFFFFFFFFFFFFFFFull;
	}

	return _prevNumber;
}
