#pragma once
#include <m2/game/Fsm.h>
#include <cuzn/Detail.h>
#include "../Common.h"
#include <set>
#include <utility>
#include <m2/ui/UiPanel.h>
#include <list>

enum class POISelectionJourneyStep {
	INITIAL_STEP = 0
};

// Signal generated by POISelectionJourney
class POIOrCancelSignal : public m2::FsmSignalBase {
	std::optional<POI> _poi;

	using m2::FsmSignalBase::FsmSignalBase;

public:
	explicit POIOrCancelSignal(std::optional<POI> poi) : m2::FsmSignalBase(m2::FsmSignalType::Custom), _poi(poi) {}

	// Accessors
	[[nodiscard]] std::optional<POI> poi() const { return _poi; }
};

class POISelectionJourney : public m2::FsmBase<POISelectionJourneyStep, PositionOrCancelSignal> {
	std::optional<std::list<m2::UiPanel>::iterator> _cancel_button_panel;

	std::set<POI> _pois;
	std::string _message;
	bool _allow_cancellation;

public:
	explicit POISelectionJourney(std::set<POI> pois, std::string message, bool allow_cancellation = true)
			: m2::FsmBase<POISelectionJourneyStep, PositionOrCancelSignal>(), _pois(std::move(pois)),
			_message(std::move(message)), _allow_cancellation(allow_cancellation) {
		init(POISelectionJourneyStep::INITIAL_STEP);
	}
	~POISelectionJourney() override {
		deinit();
	}

protected:
	std::optional<POISelectionJourneyStep> HandleSignal(const PositionOrCancelSignal&) override;
};
