syntax = "proto3";
package rpg.pb;

import "m2g_AnimationType.proto";
import "m2g_ObjectType.proto";
import "VecF.proto";

enum Capability {
    NO_CAPABILITY = 0;
    CAPABILITY_RANGED = 1;
    CAPABILITY_MELEE = 2;
    CAPABILITY_EXPLOSIVE = 3;
    CAPABILITY_KAMIKAZE = 4;
}
message Chaser {
    float give_up_distance = 1; // Distance AI gives up (in meters)
}
message HitNRun {
    float hit_distance_squared = 1; // Distance AI tries to achieve during Hit period (in meters)
    float hit_duration = 2; // Duration AI stays in Hit period (in seconds)
    float run_distance_squared = 3; // Distance AI tries to achieve during Run period (in meters)
    float run_duration = 4; // Duration AI stays in Run period (in seconds)
}
message KeepDistance {}
message Patrol {
    m2.pb.VecF area_top_left = 1; // Top-left of patrol area while idling
    m2.pb.VecF area_bottom_right = 2; // Bottom-right of patrol area while idling
    float speed = 3; // Patrol speed (in mps)
}

message Ai {
    repeated Capability capabilities = 1;
    float trigger_distance = 2; // Distance AI becomes active (in meters)
    float hit_trigger_distance = 3; // Distance AI becomes active if got hit (in meters)
    float attack_distance = 4; // Distance AI is clear to attack player (in meters)
    float recalculation_period = 5; // Period after which AI recalculates waypoints (formula: random(s/2, 3s/2))
    oneof variant {
        Chaser chaser = 6;
        HitNRun hit_n_run = 7;
        KeepDistance keep_distance = 8;
        Patrol patrol = 9;
    }
}

message Enemy {
    m2g.pb.ObjectType object_type = 1;
    m2g.pb.AnimationType animation_type = 2;
    Ai ai = 3;
}

message Enemies {
    repeated Enemy enemies = 1;
}
