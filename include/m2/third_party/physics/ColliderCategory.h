#pragma once
#include <m2/third_party/physics/RigidBody.h>
#include <array>
#include <cstdint>

namespace m2::third_party::physics {
	// The physics world contains 16 layers. Only the fixtures that both agree to collide with each other can collide.
	// One fixture can have presence in multiple layers, and may agree to collide with any other or none of the layers.
	// It is recommended to use the ColliderCategory abstraction instead of using ColliderLayer directly.
	enum ColliderLayer : uint16_t {
		COLLIDER_LAYER_BACKGROUND_OBSTACLE = 0x0001,
		COLLIDER_LAYER_BACKGROUND_FRIENDLY_OBJECT = 0x0002,
		COLLIDER_LAYER_BACKGROUND_FRIENDLY_DAMAGE = 0x0004,
		COLLIDER_LAYER_BACKGROUND_HOSTILE_OBJECT = 0x0008,
		COLLIDER_LAYER_BACKGROUND_HOSTILE_DAMAGE = 0x0010,

		COLLIDER_LAYER_FOREGROUND_OBSTACLE = 0x0020,
		COLLIDER_LAYER_FOREGROUND_FRIENDLY_OBJECT = 0x0040,
		COLLIDER_LAYER_FOREGROUND_FRIENDLY_DAMAGE = 0x0080,
		COLLIDER_LAYER_FOREGROUND_HOSTILE_OBJECT = 0x0100,
		COLLIDER_LAYER_FOREGROUND_HOSTILE_DAMAGE = 0x0200,

		COLLIDER_LAYER_FOREGROUND_FRIENDLY_ITEM = 0x0400,
	};

	// ColliderCategory is an abstraction on top of ColliderLayers. It provides commonly encountered types of objects
	// for ease of use. Background layer is modeled as the ground level. On a top-down game, background layer would be
	// the feet of the characters. Foreground layer is modeled as the waist level. On a top-down game, foreground layer
	// would be the torso of the characters.
	enum class ColliderCategory {
		// Obstacles

		// A low obstacle on the ground. Standing objects will collide, flying object will pass through.
		COLLIDER_CATEGORY_BACKGROUND_OBSTACLE = 0,
		// An airborne obstacle. Only flying objects will collide.
		COLLIDER_CATEGORY_FOREGROUND_OBSTACLE,
		// A full length obstacle. Any physical object will collide.
		COLLIDER_CATEGORY_OBSTACLE,

		// Friendly objects

		COLLIDER_CATEGORY_BACKGROUND_FRIENDLY_OBJECT,
		COLLIDER_CATEGORY_BACKGROUND_FRIENDLY_DAMAGE,
		COLLIDER_CATEGORY_FOREGROUND_FRIENDLY_OBJECT,
		COLLIDER_CATEGORY_FOREGROUND_FRIENDLY_DAMAGE,
		COLLIDER_CATEGORY_FOREGROUND_FRIENDLY_ITEM,

		// Hostile objects

		COLLIDER_CATEGORY_BACKGROUND_HOSTILE_OBJECT,
		COLLIDER_CATEGORY_BACKGROUND_HOSTILE_DAMAGE,
		COLLIDER_CATEGORY_FOREGROUND_HOSTILE_OBJECT,
		COLLIDER_CATEGORY_FOREGROUND_HOSTILE_DAMAGE,
	};

    constexpr std::array gColliderCategoryToParams = {
		// COLLIDER_CATEGORY_BACKGROUND_OBSTACLE
		ColliderParams{
			.belongsTo = COLLIDER_LAYER_BACKGROUND_OBSTACLE,
			.collidesWith = COLLIDER_LAYER_BACKGROUND_OBSTACLE
					| COLLIDER_LAYER_BACKGROUND_FRIENDLY_OBJECT | COLLIDER_LAYER_BACKGROUND_HOSTILE_OBJECT
		},

		// COLLIDER_CATEGORY_FOREGROUND_OBSTACLE
		ColliderParams{
			.belongsTo = COLLIDER_LAYER_FOREGROUND_OBSTACLE,
			.collidesWith = COLLIDER_LAYER_FOREGROUND_OBSTACLE
					| COLLIDER_LAYER_FOREGROUND_FRIENDLY_OBJECT | COLLIDER_LAYER_FOREGROUND_HOSTILE_OBJECT
					| COLLIDER_LAYER_FOREGROUND_FRIENDLY_ITEM
		},

		// COLLIDER_CATEGORY_OBSTACLE
		ColliderParams{
			.belongsTo = COLLIDER_LAYER_BACKGROUND_OBSTACLE | COLLIDER_LAYER_FOREGROUND_OBSTACLE,
			.collidesWith = COLLIDER_LAYER_BACKGROUND_OBSTACLE | COLLIDER_LAYER_FOREGROUND_OBSTACLE
					| COLLIDER_LAYER_BACKGROUND_FRIENDLY_OBJECT | COLLIDER_LAYER_BACKGROUND_HOSTILE_OBJECT
					| COLLIDER_LAYER_FOREGROUND_FRIENDLY_OBJECT | COLLIDER_LAYER_FOREGROUND_HOSTILE_OBJECT
					| COLLIDER_LAYER_FOREGROUND_FRIENDLY_ITEM
		},

		// COLLIDER_CATEGORY_BACKGROUND_FRIENDLY_OBJECT
		ColliderParams{
			.belongsTo = COLLIDER_LAYER_BACKGROUND_FRIENDLY_OBJECT,
			.collidesWith = COLLIDER_LAYER_BACKGROUND_OBSTACLE
					| COLLIDER_LAYER_BACKGROUND_HOSTILE_OBJECT | COLLIDER_LAYER_BACKGROUND_HOSTILE_DAMAGE
		},

		// COLLIDER_CATEGORY_BACKGROUND_FRIENDLY_DAMAGE
		ColliderParams{
			.belongsTo = COLLIDER_LAYER_BACKGROUND_FRIENDLY_DAMAGE,
			.collidesWith = COLLIDER_LAYER_BACKGROUND_HOSTILE_OBJECT
		},

		// COLLIDER_CATEGORY_FOREGROUND_FRIENDLY_OBJECT
		ColliderParams{
			.belongsTo = COLLIDER_LAYER_FOREGROUND_FRIENDLY_OBJECT,
			.collidesWith = COLLIDER_LAYER_FOREGROUND_OBSTACLE
					| COLLIDER_LAYER_FOREGROUND_HOSTILE_OBJECT | COLLIDER_LAYER_FOREGROUND_HOSTILE_DAMAGE
					| COLLIDER_LAYER_FOREGROUND_FRIENDLY_ITEM
		},

		// COLLIDER_CATEGORY_FOREGROUND_FRIENDLY_DAMAGE
		ColliderParams{
			.belongsTo = COLLIDER_LAYER_FOREGROUND_FRIENDLY_DAMAGE,
			.collidesWith = COLLIDER_LAYER_FOREGROUND_HOSTILE_OBJECT
		},

		// COLLIDER_CATEGORY_FOREGROUND_FRIENDLY_ITEM
		ColliderParams{
			.belongsTo = COLLIDER_LAYER_FOREGROUND_FRIENDLY_ITEM,
			.collidesWith = COLLIDER_LAYER_FOREGROUND_OBSTACLE
					| COLLIDER_LAYER_FOREGROUND_FRIENDLY_OBJECT
		},

		// COLLIDER_CATEGORY_BACKGROUND_HOSTILE_OBJECT
		ColliderParams{
			.belongsTo = COLLIDER_LAYER_BACKGROUND_HOSTILE_OBJECT,
			.collidesWith = COLLIDER_LAYER_BACKGROUND_OBSTACLE
					| COLLIDER_LAYER_BACKGROUND_FRIENDLY_OBJECT | COLLIDER_LAYER_BACKGROUND_FRIENDLY_DAMAGE
					| COLLIDER_LAYER_BACKGROUND_HOSTILE_OBJECT
		},

		// COLLIDER_CATEGORY_BACKGROUND_HOSTILE_DAMAGE
		ColliderParams{
			.belongsTo = COLLIDER_LAYER_BACKGROUND_HOSTILE_DAMAGE,
			.collidesWith = COLLIDER_LAYER_BACKGROUND_FRIENDLY_OBJECT
		},

		// COLLIDER_CATEGORY_FOREGROUND_HOSTILE_OBJECT
		ColliderParams{
			.belongsTo = COLLIDER_LAYER_FOREGROUND_HOSTILE_OBJECT,
			.collidesWith = COLLIDER_LAYER_FOREGROUND_OBSTACLE
					| COLLIDER_LAYER_FOREGROUND_FRIENDLY_OBJECT | COLLIDER_LAYER_FOREGROUND_FRIENDLY_DAMAGE
					| COLLIDER_LAYER_FOREGROUND_HOSTILE_OBJECT
		},

		// COLLIDER_CATEGORY_FOREGROUND_HOSTILE_DAMAGE
		ColliderParams{
			.belongsTo = COLLIDER_LAYER_FOREGROUND_HOSTILE_DAMAGE,
			.collidesWith = COLLIDER_LAYER_FOREGROUND_FRIENDLY_OBJECT
		},
	};

	bool DoesBelongToBackground(uint16_t belongsTo);
}
